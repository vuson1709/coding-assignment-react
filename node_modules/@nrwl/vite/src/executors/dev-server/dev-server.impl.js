"use strict";
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: ()=>viteDevServerExecutor
});
const _extends = require("@swc/helpers/lib/_extends.js").default;
require("dotenv/config");
const _vite = require("vite");
const _optionsUtils = require("../../utils/options-utils");
async function* viteDevServerExecutor(options, context) {
    // Retrieve the option for the configured buildTarget.
    const buildTargetOptions = (0, _optionsUtils.getNxTargetOptions)(options.buildTarget, context);
    // Merge the options from the build and dev-serve targets.
    // The latter takes precedence.
    const mergedOptions = _extends({}, buildTargetOptions, options);
    // Add the server specific configuration.
    const serverConfig = (0, _vite.mergeConfig)((0, _optionsUtils.getViteSharedConfig)(mergedOptions, options.clearScreen, context), {
        build: (0, _optionsUtils.getViteBuildOptions)(mergedOptions, context),
        server: (0, _optionsUtils.getViteServerOptions)(mergedOptions, context)
    });
    if (serverConfig.mode === 'production') {
        console.warn('WARNING: serve is not meant to be run in production!');
    }
    try {
        const server = await (0, _vite.createServer)(serverConfig);
        await runViteDevServer(server);
        const resolvedUrls = [
            ...server.resolvedUrls.local,
            ...server.resolvedUrls.network
        ];
        var ref;
        yield {
            success: true,
            baseUrl: (ref = resolvedUrls[0]) != null ? ref : ''
        };
    } catch (e) {
        console.error(e);
        yield {
            success: false,
            baseUrl: ''
        };
    }
    // This Promise intentionally never resolves, leaving the process running
    await new Promise(()=>{});
}
async function runViteDevServer(server) {
    await server.listen();
    server.printUrls();
    const processOnExit = async ()=>{
        await server.close();
        process.off('SIGINT', processOnExit);
        process.off('SIGTERM', processOnExit);
        process.off('exit', processOnExit);
    };
    process.on('SIGINT', processOnExit);
    process.on('SIGTERM', processOnExit);
    process.on('exit', processOnExit);
}

//# sourceMappingURL=dev-server.impl.js.map