{"version":3,"sources":["../../../../../packages/vite/src/utils/vite-config-edit-utils.ts"],"sourcesContent":["import { applyChangesToString, ChangeType, Tree } from '@nrwl/devkit';\nimport { findNodes } from 'nx/src/utils/typescript';\nimport ts = require('typescript');\nimport { tsquery } from '@phenomnomnominal/tsquery';\nimport { TargetFlags } from './generator-utils';\n\nexport function ensureBuildOptionsInViteConfig(\n  tree: Tree,\n  path: string,\n  buildConfigString: string,\n  buildConfigObject: {},\n  dtsPlugin: string,\n  dtsImportLine: string,\n  pluginOption: string,\n  testConfigString: string,\n  testConfigObject: {},\n  projectAlreadyHasViteTargets?: TargetFlags\n): boolean {\n  const fileContent = tree.read(path, 'utf-8');\n\n  let updatedContent = undefined;\n\n  if (!projectAlreadyHasViteTargets?.test && testConfigString?.length) {\n    updatedContent = handleBuildOrTestNode(\n      fileContent,\n      testConfigString,\n      testConfigObject,\n      'test'\n    );\n  }\n\n  if (!projectAlreadyHasViteTargets?.build && buildConfigString?.length) {\n    updatedContent = handlePluginNode(\n      updatedContent ?? fileContent,\n      dtsPlugin,\n      dtsImportLine,\n      pluginOption\n    );\n\n    updatedContent = handleBuildOrTestNode(\n      updatedContent ?? fileContent,\n      buildConfigString,\n      buildConfigObject,\n      'build'\n    );\n  }\n\n  if (updatedContent) {\n    tree.write(path, updatedContent);\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction handleBuildOrTestNode(\n  updatedFileContent: string,\n  configContentString: string,\n  configContentObject: {},\n  name: 'build' | 'test'\n): string | undefined {\n  const buildNode = tsquery.query(\n    updatedFileContent,\n    `PropertyAssignment:has(Identifier[name=\"${name}\"])`\n  );\n\n  if (buildNode.length) {\n    return tsquery.replace(\n      updatedFileContent,\n      `PropertyAssignment:has(Identifier[name=\"${name}\"])`,\n      (node: ts.Node) => {\n        const found = tsquery.query(node, 'ObjectLiteralExpression');\n        return `${name}: {\n                  ...${found?.[0].getText()},\n                  ...${JSON.stringify(configContentObject)}\n               }`;\n      }\n    );\n  } else {\n    const foundDefineConfig = tsquery.query(\n      updatedFileContent,\n      'CallExpression:has(Identifier[name=\"defineConfig\"])'\n    );\n\n    if (foundDefineConfig.length) {\n      const conditionalConfig = tsquery.query(\n        foundDefineConfig[0],\n        'ArrowFunction'\n      );\n\n      if (conditionalConfig.length) {\n        if (name === 'build') {\n          return transformConditionalConfig(\n            conditionalConfig,\n            updatedFileContent,\n            configContentString\n          );\n        } else {\n          // no test config in conditional config\n          return undefined;\n        }\n      } else {\n        const propertyAssignments = tsquery.query(\n          foundDefineConfig[0],\n          'PropertyAssignment'\n        );\n\n        if (propertyAssignments.length) {\n          return applyChangesToString(updatedFileContent, [\n            {\n              type: ChangeType.Insert,\n              index: propertyAssignments[0].getStart(),\n              text: configContentString,\n            },\n          ]);\n        } else {\n          return applyChangesToString(updatedFileContent, [\n            {\n              type: ChangeType.Insert,\n              index: foundDefineConfig[0].getStart() + 14,\n              text: configContentString,\n            },\n          ]);\n        }\n      }\n    } else {\n      // build config does not exist and defineConfig is not used\n      // could also potentially be invalid syntax, so try-catch\n      try {\n        const defaultExport = tsquery.query(\n          updatedFileContent,\n          'ExportAssignment'\n        );\n        const found = tsquery?.query(\n          defaultExport?.[0],\n          'ObjectLiteralExpression'\n        );\n        const startOfObject = found?.[0].getStart();\n        return applyChangesToString(updatedFileContent, [\n          {\n            type: ChangeType.Insert,\n            index: startOfObject + 1,\n            text: configContentString,\n          },\n        ]);\n      } catch {\n        return undefined;\n      }\n    }\n  }\n}\n\nfunction transformCurrentBuildObject(\n  index: number,\n  returnStatements: ts.ReturnStatement[],\n  appFileContent: string,\n  buildConfigObject: {}\n): string | undefined {\n  if (!returnStatements?.[index]) {\n    return undefined;\n  }\n  const currentBuildObject = tsquery\n    .query(returnStatements[index], 'ObjectLiteralExpression')?.[0]\n    .getText();\n\n  const currentBuildObjectStart = returnStatements[index].getStart();\n  const currentBuildObjectEnd = returnStatements[index].getEnd();\n\n  const newReturnObject = tsquery.replace(\n    returnStatements[index].getText(),\n    'ObjectLiteralExpression',\n    (_node: ts.Node) => {\n      return `{\n        ...${currentBuildObject},\n        ...${JSON.stringify(buildConfigObject)}\n     }`;\n    }\n  );\n\n  const newContents = applyChangesToString(appFileContent, [\n    {\n      type: ChangeType.Delete,\n      start: currentBuildObjectStart,\n      length: currentBuildObjectEnd - currentBuildObjectStart,\n    },\n    {\n      type: ChangeType.Insert,\n      index: currentBuildObjectStart,\n      text: newReturnObject,\n    },\n  ]);\n\n  return newContents;\n}\n\nfunction transformConditionalConfig(\n  conditionalConfig: ts.Node[],\n  appFileContent: string,\n  buildConfigObject: {}\n): string | undefined {\n  const functionBlock = tsquery.query(conditionalConfig[0], 'Block');\n\n  const ifStatement = tsquery.query(functionBlock?.[0], 'IfStatement');\n\n  const binaryExpressions = tsquery.query(ifStatement?.[0], 'BinaryExpression');\n\n  const buildExists = binaryExpressions?.find(\n    (binaryExpression) => binaryExpression.getText() === `command === 'build'`\n  );\n\n  const buildExistsExpressionIndex = binaryExpressions?.findIndex(\n    (binaryExpression) => binaryExpression.getText() === `command === 'build'`\n  );\n\n  const serveExists = binaryExpressions?.find(\n    (binaryExpression) => binaryExpression.getText() === `command === 'serve'`\n  );\n\n  const elseKeywordExists = findNodes(\n    ifStatement?.[0],\n    ts.SyntaxKind.ElseKeyword\n  );\n  const returnStatements: ts.ReturnStatement[] = tsquery.query(\n    ifStatement[0],\n    'ReturnStatement'\n  );\n\n  if (!buildExists) {\n    if (serveExists && elseKeywordExists) {\n      // build options live inside the else block\n\n      return transformCurrentBuildObject(\n        returnStatements?.length - 1,\n        returnStatements,\n        appFileContent,\n        buildConfigObject\n      );\n    } else {\n      // no build options exist yet\n      const functionBlockStart = functionBlock?.[0].getStart();\n      const newContents = applyChangesToString(appFileContent, [\n        {\n          type: ChangeType.Insert,\n          index: functionBlockStart + 1,\n          text: `\n            if (command === 'build') {\n              return ${JSON.stringify(buildConfigObject)}\n            }\n            `,\n        },\n      ]);\n      return newContents;\n    }\n  } else {\n    // build already exists\n    // it will be the return statement which lives\n    // at the buildExistsExpressionIndex\n\n    return transformCurrentBuildObject(\n      buildExistsExpressionIndex,\n      returnStatements,\n      appFileContent,\n      buildConfigObject\n    );\n  }\n}\n\nfunction handlePluginNode(\n  appFileContent: string,\n  dtsPlugin: string,\n  dtsImportLine: string,\n  pluginOption: string\n): string | undefined {\n  const file = tsquery.ast(appFileContent);\n  const pluginsNode = tsquery.query(\n    file,\n    'PropertyAssignment:has(Identifier[name=\"plugins\"])'\n  );\n\n  let writeFile = false;\n\n  if (pluginsNode.length) {\n    appFileContent = tsquery.replace(\n      file.getText(),\n      'PropertyAssignment:has(Identifier[name=\"plugins\"])',\n      (node: ts.Node) => {\n        const found = tsquery.query(node, 'ArrayLiteralExpression');\n        return `plugins: [\n                    ...${found?.[0].getText()},\n                    ${dtsPlugin}\n                ]`;\n      }\n    );\n    writeFile = true;\n  } else {\n    // Plugins node does not exist yet\n    // So make one from scratch\n\n    const foundDefineConfig = tsquery.query(\n      file,\n      'CallExpression:has(Identifier[name=\"defineConfig\"])'\n    );\n\n    if (foundDefineConfig.length) {\n      const conditionalConfig = tsquery.query(\n        foundDefineConfig[0],\n        'ArrowFunction'\n      );\n\n      if (conditionalConfig.length) {\n        // We are NOT transforming the conditional config\n        // with plugins\n        writeFile = false;\n      } else {\n        const propertyAssignments = tsquery.query(\n          foundDefineConfig[0],\n          'PropertyAssignment'\n        );\n\n        if (propertyAssignments.length) {\n          appFileContent = applyChangesToString(appFileContent, [\n            {\n              type: ChangeType.Insert,\n              index: propertyAssignments[0].getStart(),\n              text: pluginOption,\n            },\n          ]);\n          writeFile = true;\n        } else {\n          appFileContent = applyChangesToString(appFileContent, [\n            {\n              type: ChangeType.Insert,\n              index: foundDefineConfig[0].getStart() + 14,\n              text: pluginOption,\n            },\n          ]);\n          writeFile = true;\n        }\n      }\n    } else {\n      // Plugins option does not exist and defineConfig is not used\n      // could also potentially be invalid syntax, so try-catch\n      try {\n        const defaultExport = tsquery.query(file, 'ExportAssignment');\n        const found = tsquery?.query(\n          defaultExport?.[0],\n          'ObjectLiteralExpression'\n        );\n        const startOfObject = found?.[0].getStart();\n        appFileContent = applyChangesToString(appFileContent, [\n          {\n            type: ChangeType.Insert,\n            index: startOfObject + 1,\n            text: pluginOption,\n          },\n        ]);\n        writeFile = true;\n      } catch {\n        writeFile = false;\n      }\n    }\n  }\n\n  if (writeFile) {\n    if (!appFileContent.includes(`import dts from 'vite-plugin-dts'`)) {\n      return dtsImportLine + '\\n' + appFileContent;\n    }\n    return appFileContent;\n  }\n  return undefined;\n}\n"],"names":["ensureBuildOptionsInViteConfig","ts","tree","path","buildConfigString","buildConfigObject","dtsPlugin","dtsImportLine","pluginOption","testConfigString","testConfigObject","projectAlreadyHasViteTargets","fileContent","read","updatedContent","undefined","test","length","handleBuildOrTestNode","build","handlePluginNode","write","updatedFileContent","configContentString","configContentObject","name","buildNode","tsquery","query","replace","node","found","getText","JSON","stringify","foundDefineConfig","conditionalConfig","transformConditionalConfig","propertyAssignments","applyChangesToString","type","ChangeType","Insert","index","getStart","text","defaultExport","startOfObject","transformCurrentBuildObject","returnStatements","appFileContent","currentBuildObject","currentBuildObjectStart","currentBuildObjectEnd","getEnd","newReturnObject","_node","newContents","Delete","start","functionBlock","ifStatement","binaryExpressions","buildExists","find","binaryExpression","buildExistsExpressionIndex","findIndex","serveExists","elseKeywordExists","findNodes","SyntaxKind","ElseKeyword","functionBlockStart","file","ast","pluginsNode","writeFile","includes"],"mappings":"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"}