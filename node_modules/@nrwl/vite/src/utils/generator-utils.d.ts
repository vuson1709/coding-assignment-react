import { TargetConfiguration, Tree } from '@nrwl/devkit';
import { Schema } from '../generators/configuration/schema';
export interface TargetFlags {
    build?: boolean;
    serve?: boolean;
    test?: boolean;
}
export interface UserProvidedTargetName {
    build?: string;
    serve?: string;
    test?: string;
}
export interface ValidFoundTargetName {
    build?: string;
    serve?: string;
    test?: string;
}
export declare function findExistingTargetsInProject(targets: {
    [targetName: string]: TargetConfiguration;
}, userProvidedTargets?: UserProvidedTargetName): {
    validFoundTargetName: ValidFoundTargetName;
    projectContainsUnsupportedExecutor?: boolean;
    userProvidedTargetIsUnsupported?: TargetFlags;
    alreadyHasNxViteTargets?: TargetFlags;
};
export declare function addOrChangeTestTarget(tree: Tree, options: Schema, target: string): void;
export declare function addOrChangeBuildTarget(tree: Tree, options: Schema, target: string): void;
export declare function addOrChangeServeTarget(tree: Tree, options: Schema, target: string): void;
export declare function editTsConfig(tree: Tree, options: Schema): void;
export declare function moveAndEditIndexHtml(tree: Tree, options: Schema, buildTarget: string): void;
export declare function createOrEditViteConfig(tree: Tree, options: Schema, onlyVitest?: boolean, projectAlreadyHasViteTargets?: TargetFlags): void;
export declare function normalizeViteConfigFilePathWithTree(tree: Tree, projectRoot: string, configFile?: string): string;
export declare function getViteConfigPathForProject(tree: Tree, projectName: string, target?: string): string;
export declare function handleUnsupportedUserProvidedTargets(userProvidedTargetIsUnsupported: TargetFlags, userProvidedTargetName: UserProvidedTargetName, validFoundTargetName: ValidFoundTargetName): Promise<void>;
export declare function handleUnknownExecutors(projectName: string): Promise<void>;
