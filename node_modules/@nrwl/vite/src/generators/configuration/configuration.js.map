{"version":3,"sources":["../../../../../../packages/vite/src/generators/configuration/configuration.ts"],"sourcesContent":["import {\n  convertNxGenerator,\n  formatFiles,\n  GeneratorCallback,\n  readProjectConfiguration,\n  Tree,\n} from '@nrwl/devkit';\nimport { runTasksInSerial } from '@nrwl/workspace/src/utilities/run-tasks-in-serial';\nimport {\n  findExistingTargetsInProject,\n  addOrChangeBuildTarget,\n  addOrChangeServeTarget,\n  editTsConfig,\n  moveAndEditIndexHtml,\n  createOrEditViteConfig,\n  handleUnsupportedUserProvidedTargets,\n  handleUnknownExecutors,\n  UserProvidedTargetName,\n  TargetFlags,\n} from '../../utils/generator-utils';\n\nimport initGenerator from '../init/init';\nimport vitestGenerator from '../vitest/vitest-generator';\nimport { Schema } from './schema';\n\nexport async function viteConfigurationGenerator(tree: Tree, schema: Schema) {\n  const tasks: GeneratorCallback[] = [];\n\n  const { targets, projectType } = readProjectConfiguration(\n    tree,\n    schema.project\n  );\n  let buildTargetName = 'build';\n  let serveTargetName = 'serve';\n  let testTargetName = 'test';\n\n  schema.includeLib ??= projectType === 'library';\n\n  /**\n   * This is for when we are convering an existing project\n   * to use the vite executors.\n   *  */\n  let projectAlreadyHasViteTargets: TargetFlags;\n  if (!schema.newProject) {\n    const userProvidedTargetName: UserProvidedTargetName = {\n      build: schema.buildTarget,\n      serve: schema.serveTarget,\n      test: schema.testTarget,\n    };\n\n    const {\n      validFoundTargetName,\n      projectContainsUnsupportedExecutor,\n      userProvidedTargetIsUnsupported,\n      alreadyHasNxViteTargets,\n    } = findExistingTargetsInProject(targets, userProvidedTargetName);\n    projectAlreadyHasViteTargets = alreadyHasNxViteTargets;\n    /**\n     * This means that we only found unsupported build targets in that project.\n     * The only way that buildTarget is defined, means that it is supported.\n     *\n     * If the `unsupported` flag was false, it would mean that we did not find\n     * a build target at all, so we can create a new one.\n     *\n     * So we only throw if we found a target, but it is unsupported.\n     *\n     * */\n    if (!validFoundTargetName.build && projectContainsUnsupportedExecutor) {\n      throw new Error(\n        `The project ${schema.project} cannot be converted to use the @nrwl/vite executors.`\n      );\n    }\n\n    if (\n      alreadyHasNxViteTargets.build &&\n      (alreadyHasNxViteTargets.serve ||\n        (!alreadyHasNxViteTargets.serve && projectType === 'library')) &&\n      alreadyHasNxViteTargets.test\n    ) {\n      throw new Error(\n        `The project ${schema.project} is aready configured to use the @nrwl/vite executors.\n        Please try a different project, or remove the existing targets \n        and re-run this generator to reset the existing Vite Configuration.\n        `\n      );\n    }\n\n    /**\n     * This means that we did not find any supported executors\n     * so we don't have any valid target names.\n     *\n     * However, the executors that we may have found are not in the\n     * list of the specifically unsupported executors either.\n     *\n     * So, we should warn the user about it.\n     */\n\n    if (\n      !projectContainsUnsupportedExecutor &&\n      !validFoundTargetName.build &&\n      !validFoundTargetName.serve &&\n      !validFoundTargetName.test\n    ) {\n      await handleUnknownExecutors(schema.project);\n    }\n\n    /**\n     * There is a possibility at this stage that the user has provided\n     * targets with unsupported executors.\n     * We keep track here of which of the targets that the user provided\n     * are unsupported.\n     * We do this with the `userProvidedTargetIsUnsupported` object,\n     * which contains flags for each target (whether it is supported or not).\n     *\n     * We also keep track of the targets that we found in the project,\n     * through the findExistingTargetsInProject function, which returns\n     * targets for build/serve/test that use supported executors, and\n     * can be coverted to use the vite executors. These are the\n     * kept in the validFoundTargetName object.\n     *\n     */\n    await handleUnsupportedUserProvidedTargets(\n      userProvidedTargetIsUnsupported,\n      userProvidedTargetName,\n      validFoundTargetName\n    );\n\n    /**\n     * Once the user is at this stage, then they can go ahead and convert.\n     */\n\n    buildTargetName = validFoundTargetName.build ?? buildTargetName;\n    serveTargetName = validFoundTargetName.serve ?? serveTargetName;\n\n    if (projectType === 'application') {\n      moveAndEditIndexHtml(tree, schema, buildTargetName);\n    }\n    editTsConfig(tree, schema);\n  }\n\n  const initTask = await initGenerator(tree, {\n    uiFramework: schema.uiFramework,\n    includeLib: schema.includeLib,\n  });\n  tasks.push(initTask);\n\n  if (!projectAlreadyHasViteTargets?.build) {\n    addOrChangeBuildTarget(tree, schema, buildTargetName);\n  }\n\n  if (!schema.includeLib && !projectAlreadyHasViteTargets?.serve) {\n    addOrChangeServeTarget(tree, schema, serveTargetName);\n  }\n\n  createOrEditViteConfig(tree, schema, false, projectAlreadyHasViteTargets);\n\n  if (schema.includeVitest) {\n    const vitestTask = await vitestGenerator(tree, {\n      project: schema.project,\n      uiFramework: schema.uiFramework,\n      inSourceTests: schema.inSourceTests,\n      coverageProvider: 'c8',\n      skipViteConfig: true,\n      testTarget: testTargetName,\n    });\n    tasks.push(vitestTask);\n  }\n\n  await formatFiles(tree);\n\n  return runTasksInSerial(...tasks);\n}\n\nexport default viteConfigurationGenerator;\nexport const configurationSchematic = convertNxGenerator(\n  viteConfigurationGenerator\n);\n"],"names":["viteConfigurationGenerator","configurationSchematic","schema","tree","tasks","targets","projectType","readProjectConfiguration","project","buildTargetName","serveTargetName","testTargetName","includeLib","projectAlreadyHasViteTargets","newProject","userProvidedTargetName","build","buildTarget","serve","serveTarget","test","testTarget","validFoundTargetName","projectContainsUnsupportedExecutor","userProvidedTargetIsUnsupported","alreadyHasNxViteTargets","findExistingTargetsInProject","Error","handleUnknownExecutors","handleUnsupportedUserProvidedTargets","moveAndEditIndexHtml","editTsConfig","initTask","initGenerator","uiFramework","push","addOrChangeBuildTarget","addOrChangeServeTarget","createOrEditViteConfig","includeVitest","vitestTask","vitestGenerator","inSourceTests","coverageProvider","skipViteConfig","formatFiles","runTasksInSerial","convertNxGenerator"],"mappings":"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"}