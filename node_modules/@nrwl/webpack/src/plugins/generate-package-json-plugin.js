"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GeneratePackageJsonPlugin = void 0;
const webpack_1 = require("webpack");
const devkit_1 = require("@nrwl/devkit");
const compiler_helper_dependency_1 = require("@nrwl/js/src/utils/compiler-helper-dependency");
const typescript_1 = require("@nrwl/workspace/src/utilities/typescript");
const lock_file_1 = require("nx/src/lock-file/lock-file");
const pluginName = 'GeneratePackageJsonPlugin';
class GeneratePackageJsonPlugin {
    constructor(options, context) {
        this.options = options;
        this.context = context;
        this.projectGraph = context.projectGraph;
    }
    apply(compiler) {
        compiler.hooks.thisCompilation.tap(pluginName, (compilation) => {
            compilation.hooks.processAssets.tap({
                name: pluginName,
                stage: compiler.webpack.Compilation.PROCESS_ASSETS_STAGE_ADDITIONAL,
            }, () => {
                var _a;
                const helperDependencies = (0, compiler_helper_dependency_1.getHelperDependenciesFromProjectGraph)(this.context.root, this.context.projectName, this.projectGraph);
                const importHelpers = !!(0, typescript_1.readTsConfig)(this.options.tsConfig).options
                    .importHelpers;
                const shouldAddHelperDependency = importHelpers &&
                    helperDependencies.every((dep) => dep.target !== compiler_helper_dependency_1.HelperDependency.tsc);
                if (shouldAddHelperDependency) {
                    helperDependencies.push({
                        type: 'static',
                        source: this.context.projectName,
                        target: compiler_helper_dependency_1.HelperDependency.tsc,
                    });
                }
                if (helperDependencies.length > 0) {
                    this.projectGraph.dependencies[this.context.projectName] =
                        this.projectGraph.dependencies[this.context.projectName].concat(helperDependencies);
                }
                const packageJson = (0, devkit_1.createPackageJson)(this.context.projectName, this.projectGraph, { root: this.context.root, isProduction: true });
                packageJson.main = (_a = packageJson.main) !== null && _a !== void 0 ? _a : this.options.outputFileName;
                compilation.emitAsset('package.json', new webpack_1.sources.RawSource((0, devkit_1.serializeJson)(packageJson)));
                compilation.emitAsset((0, lock_file_1.getLockFileName)(), new webpack_1.sources.RawSource((0, devkit_1.createLockFile)(packageJson)));
            });
        });
    }
}
exports.GeneratePackageJsonPlugin = GeneratePackageJsonPlugin;
//# sourceMappingURL=generate-package-json-plugin.js.map