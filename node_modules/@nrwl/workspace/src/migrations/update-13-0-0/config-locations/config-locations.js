"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const devkit_1 = require("@nrwl/devkit");
function update(tree) {
    return tslib_1.__awaiter(this, void 0, void 0, function* () {
        const nxJson = (0, devkit_1.readJson)(tree, 'nx.json');
        // updateProjectConfiguration automatically saves the project opts into workspace/project.json
        if (nxJson.projects) {
            Object.entries(nxJson.projects).forEach(([p, nxJsonConfiguration]) => {
                var _a, _b;
                const configuration = (0, devkit_1.readProjectConfiguration)(tree, p);
                (_a = configuration.tags) !== null && _a !== void 0 ? _a : (configuration.tags = nxJsonConfiguration.tags);
                (_b = configuration.implicitDependencies) !== null && _b !== void 0 ? _b : (configuration.implicitDependencies = nxJsonConfiguration.implicitDependencies);
                (0, devkit_1.updateProjectConfiguration)(tree, p, configuration);
            });
            delete nxJson.projects;
        }
        (0, devkit_1.writeJson)(tree, 'nx.json', nxJson);
        movePropertiesAreInNewLocations(tree); // move config options to new spots.
        yield (0, devkit_1.formatFiles)(tree);
    });
}
exports.default = update;
/**
 * `updateWorkspaceConfiguration` already handles
 * placing properties in their new locations, so
 * reading + updating it ensures that props are placed
 * correctly.
 */
function movePropertiesAreInNewLocations(tree) {
    // If nx.json doesn't exist then there is no where to move these properties to
    if (!tree.exists('nx.json')) {
        return;
    }
    const workspacePath = (0, devkit_1.getWorkspacePath)(tree);
    if (!workspacePath) {
        return;
    }
    const nxJson = (0, devkit_1.readNxJson)(tree);
    (0, devkit_1.updateJson)(tree, workspacePath, (json) => {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var _j, _k;
        (_a = nxJson.generators) !== null && _a !== void 0 ? _a : (nxJson.generators = (_b = json.generators) !== null && _b !== void 0 ? _b : json.schematics);
        if (nxJson.cli) {
            (_c = (_j = nxJson.cli).defaultCollection) !== null && _c !== void 0 ? _c : (_j.defaultCollection = (_d = json.cli) === null || _d === void 0 ? void 0 : _d.defaultCollection);
            (_e = (_k = nxJson.cli).packageManager) !== null && _e !== void 0 ? _e : (_k.packageManager = (_f = json.cli) === null || _f === void 0 ? void 0 : _f.packageManager);
        }
        else if (json.cli) {
            (_g = nxJson.cli) !== null && _g !== void 0 ? _g : (nxJson.cli = json.cli);
        }
        (_h = nxJson.defaultProject) !== null && _h !== void 0 ? _h : (nxJson.defaultProject = json.defaultProject);
        delete json.cli;
        delete json.defaultProject;
        delete json.schematics;
        delete json.generators;
        return json;
    });
    (0, devkit_1.updateNxJson)(tree, nxJson);
}
//# sourceMappingURL=config-locations.js.map