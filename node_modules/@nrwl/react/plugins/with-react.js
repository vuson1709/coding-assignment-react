"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.withReact = void 0;
const processed = new Set();
function withReact() {
    return function configure(config, _ctx) {
        var _a;
        if (processed.has(config))
            return config;
        config.module.rules.push({
            test: /\.svg$/,
            issuer: /\.(js|ts|md)x?$/,
            use: [
                {
                    loader: require.resolve('@svgr/webpack'),
                    options: {
                        svgo: false,
                        titleProp: true,
                        ref: true,
                    },
                },
                {
                    loader: require.resolve('file-loader'),
                    options: {
                        name: '[name].[hash].[ext]',
                    },
                },
            ],
        });
        if (config.mode === 'development' && ((_a = config['devServer']) === null || _a === void 0 ? void 0 : _a.hot)) {
            // add `react-refresh/babel` to babel loader plugin
            const babelLoader = config.module.rules.find((rule) => {
                var _a;
                return typeof rule !== 'string' &&
                    ((_a = rule.loader) === null || _a === void 0 ? void 0 : _a.toString().includes('babel-loader'));
            });
            if (babelLoader && typeof babelLoader !== 'string') {
                babelLoader.options['plugins'] = [
                    ...(babelLoader.options['plugins'] || []),
                    [
                        require.resolve('react-refresh/babel'),
                        {
                            skipEnvCheck: true,
                        },
                    ],
                ];
            }
            const ReactRefreshPlugin = require('@pmmmwh/react-refresh-webpack-plugin');
            config.plugins.push(new ReactRefreshPlugin());
        }
        // enable webpack node api
        config.node = {
            __dirname: true,
            __filename: true,
        };
        processed.add(config);
        return config;
    };
}
exports.withReact = withReact;
//# sourceMappingURL=with-react.js.map